面向对象设计原则
单一职责：类的职责要单一,不能将太多的职责放到一个类中
		 在修改时不会影响到其他的功能,而且在定位错误时,真的很快,1个2000行的代码,和一个500行的代码,那个定位错误速度快,看都看出来了吧

开闭原则：对修改关闭,对扩展开放,即在不修改一个类的基础上去扩展功能
		 如果可以尽量是添加一些辅助类去完成这个功能,而不是在物体本身,物体本身更多的只是对于这些辅助类的调度
		 如虚幻引擎中的Component和Actor,Actor只调度,而不是去实现主体功能,当然代码很少的话,就无所谓了

里氏替换原则：一个可以解释父类对象的地方，一定可以接受一个子类对象
			在操作时,尽量面对父类对象来编程,而不是一个具体的子类
			父类可以变成子类,而子类是无法转成父类的,如果你使具体类,后期实现开闭原则很麻烦

依赖倒置原则：要针对接口抽象层编程,而不是针对具体的类
			 当调用某一个类的行为时,传入接口,让调用类直接调用接口的函数,而不是一个具体的类
			 其实和里氏代换很像,但一个是接口,一个是父类,让上层继承这个接口去实现对应的功能
			 如我在游戏中拾取物品,有拾取完直接消失进入背包,有的直接绑到手上,正常来说你要为这两个类的行为,写两种拾取的方法
			 如果他们俩都继承了一个交互的接口,你只需要调这个接口的函数就可以了
			 
接口隔离原则：要用多个专门的接口来取代一个统一的接口
			 客户端继承的接口,最好是全实现,而不是那个有用实现那个,如果出现这种情况
			 最好是吧一个接口拆分成两个,来进行多继承

合成复用原则：尽量多使用组合和聚合的关联关系，少使用继承
			 其实这个和开闭就非常像了,就是Actor和Component的关系

迪米特法则：如果两个类不必彼此直接通信,那么这两个类就不应该发生直接的互相引用,而是通过引入一个第三者来间接交互
		   如果子弹打到一个角色要受伤,角色有一个控制血量的组件,你不应该调用角色的血量组件去让他受伤
		   而是让角色给提供一个,受伤的逻辑,子弹去调用这个角色受伤的逻辑
		   其实看完以后你会发现,所有的原则核心动机,都是为了开闭原则